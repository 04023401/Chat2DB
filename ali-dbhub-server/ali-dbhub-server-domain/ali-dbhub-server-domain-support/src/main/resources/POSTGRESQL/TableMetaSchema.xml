<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alibaba.dbhub.server.domain.support.dialect.postgresql.mapper.PostgresqlMetaSchemaMapper">
    <resultMap id="BaseResultMap" type="com.alibaba.dbhub.server.domain.support.model.TableColumn">
        <result property="name" jdbcType="CHAR" column="column_name"/>
        <result property="tableName" jdbcType="CHAR" column="table_name"/>
        <!--  <result property="precision" jdbcType="INTEGER" column="numeric_precision"/ >-->
        <!--  <result property="scale" jdbcType="INTEGER" column="numeric_scale"/> -->
        <result property="dataType" jdbcType="CHAR" column="data_type"/>
        <result property="columnType" jdbcType="CHAR" column="view_type"/>
        <!-- <result property="ordinalPosition" jdbcType="INTEGER" column="ordinal_position"/> -->
        <result property="defaultValue" jdbcType="CHAR" column="column_default"/>
    </resultMap>


    <resultMap id="TableIndexResultMap" type="com.alibaba.dbhub.server.domain.support.model.TableIndex">
        <result property="name" jdbcType="CHAR" column="indexname"/>
        <result property="tableName" jdbcType="CHAR" column="tablename"/>
        <result property="tableSchemaName" jdbcType="INTEGER" column="schemaname"/>
        <result property="comment" jdbcType="CHAR" column="indexdef"/>
    </resultMap>

    <!--    <select id="selectColumns" resultMap="BaseResultMap">-->
    <!--        select distinct ordinal_position,-->
    <!--        pg_catalog.col_description(b.oid, ordinal_position)  as column_comment,-->
    <!--        table_catalog,-->
    <!--        table_schema,-->
    <!--        table_name,-->
    <!--        column_name,-->
    <!--        attinhcount,-->
    <!--        data_type,-->
    <!--        udt_name,-->
    <!--        is_nullable,-->
    <!--        column_default,-->
    <!--        numeric_scale,-->
    <!--        numeric_precision,-->
    <!--        collation_schema,-->
    <!--        collation_name,-->
    <!--        format_type(a.atttypid, a.atttypmod)  as view_type,-->
    <!--        indisprimary-->
    <!--        from information_schema.Columns c-->
    <!--        inner join pg_attribute a ON(a.attname= c.column_name)  left JOIN pg_class b ON(a.attrelid= b.oid-->
    <!--        and b.relname= c.table_name)  left jOIN pg_namespace n ON(n.oid= b.relnamespace-->
    <!--        and n.nspname= c.table_schema)  left join pg_index i on a.attnum= any(i.indkey)  and i.indrelid= b.oid-->
    <!--        where table_schema= #{tableSchema,jdbcType=VARCHAR} and table_name IN-->
    <!--        <foreach collection="tableNames" item="item" separator="," open="(" close=")">-->
    <!--            #{item}-->
    <!--        </foreach>-->
    <!--        and attrelid= #{fullName,jdbcType=VARCHAR}::regclass::oid order by ordinal_position;-->
    <!--    </select>-->

    <select id="selectColumns" resultMap="BaseResultMap">
        select ordinal_position,
        table_schema,
        table_name,
        column_name,
        data_type,
        udt_name as view_type,
        is_nullable,
        column_default,
        numeric_scale,
        numeric_precision,
        collation_schema,
        collation_name
        from information_schema.Columns
        where table_schema= #{tableSchema,jdbcType=VARCHAR}
        and table_name = #{tableName}
        order by ordinal_position;
    </select>

    <update id="dropTable">
        drop table ${tableName};
    </update>
    <select id="showDatabases" resultType="java.lang.String">
        select datname from pg_database;
    </select>
    <select id="selectTables" resultType="java.lang.String">
        SELECT tablename FROM pg_tables WHERE tablename NOT LIKE 'pg%' AND tablename NOT LIKE 'sql_%'
        <if test="tableSchema != null">
            AND schemaname=#{tableSchema,jdbcType=VARCHAR}
        </if>
        ORDER BY tablename
        ;
    </select>

    <select id="selectTableCount">
        SELECT count(*) FROM pg_tables WHERE tablename NOT LIKE 'pg%' AND tablename NOT LIKE 'sql_%'
        <if test="tableSchema != null">
            AND schemaname=#{tableSchema,jdbcType=VARCHAR}
        </if>
        ;
    </select>

    <select id="showCreateTable" resultType="java.lang.String">
        CREATE OR REPLACE FUNCTION showcreatetable(namespace character varying, tablename character varying)
        RETURNS character varying AS

        $BODY$
        declare
        tableScript character varying default '';

        begin
        -- columns
        tableScript:=tableScript || ' CREATE TABLE '|| tablename|| ' ( '|| chr(13)||chr(10) || array_to_string(
        array(
        select ' ' || concat_ws(' ',fieldName, fieldType, fieldLen, indexType, isNullStr, fieldComment ) as column_line
        from (
        select a.attname as fieldName,format_type(a.atttypid,a.atttypmod) as fieldType,(case when atttypmod-4>0 then
        atttypmod-4 else 0 end) as fieldLen,
        (case when (select count(*) from pg_constraint where conrelid = a.attrelid and conkey[1]=attnum and
        contype='p')>0 then 'PRI'
        when (select count(*) from pg_constraint where conrelid = a.attrelid and conkey[1]=attnum and contype='u')>0
        then 'UNI'
        when (select count(*) from pg_constraint where conrelid = a.attrelid and conkey[1]=attnum and contype='f')>0
        then 'FRI'
        else '' end) as indexType,
        (case when a.attnotnull=true then 'not null' else 'null' end) as isNullStr,
        ' comment ' || col_description(a.attrelid,a.attnum) as fieldComment
        from pg_attribute a where attstattarget=-1 and attrelid = (select c.oid from pg_class c,pg_namespace n where
        c.relnamespace=n.oid and n.nspname =namespace and relname =tablename)

        ) as string_columns
        ),','||chr(13)||chr(10)) || ',';


        -- 约束
        tableScript:= tableScript || chr(13)||chr(10) || array_to_string(
        array(
        select concat(' CONSTRAINT ',conname ,c ,u,p,f) from (
        select conname,
        case when contype='c' then ' CHECK('|| ( select findattname(namespace,tablename,'c') ) ||')' end as c ,
        case when contype='u' then ' UNIQUE('|| ( select findattname(namespace,tablename,'u') ) ||')' end as u ,
        case when contype='p' then ' PRIMARY KEY ('|| ( select findattname(namespace,tablename,'p') ) ||')' end as p ,
        case when contype='f' then ' FOREIGN KEY('|| ( select findattname(namespace,tablename,'u') ) ||') REFERENCES '||
        (select p.relname from pg_class p where p.oid=c.confrelid ) || '('|| ( select
        findattname(namespace,tablename,'u') ) ||')' end as f
        from pg_constraint c
        where contype in('u','c','f','p') and conrelid=(
        select oid from pg_class where relname=tablename and relnamespace =(
        select oid from pg_namespace where nspname = namespace
        )
        )
        ) as t
        ) ,',' || chr(13)||chr(10) ) || chr(13)||chr(10) ||' ); ';

        -- indexs
        -- CREATE UNIQUE INDEX pg_language_oid_index ON pg_language USING btree (oid); -- table pg_language


        --
        /** **/
        --- 获取非约束索引 column
        -- CREATE UNIQUE INDEX pg_language_oid_index ON pg_language USING btree (oid); -- table pg_language
        tableScript:= tableScript || chr(13)||chr(10) || chr(13)||chr(10) || array_to_string(
        array(
        select 'CREATE INDEX ' || indexrelname || ' ON ' || tablename || ' USING btree '|| '(' || attname || ');' from (
        SELECT
        i.relname AS indexrelname , x.indkey,

        ( select array_to_string (
        array(
        select a.attname from pg_attribute a where attrelid=c.oid and a.attnum in ( select unnest(x.indkey) )

        )
        ,',' ) )as attname

        FROM pg_class c
        JOIN pg_index x ON c.oid = x.indrelid
        JOIN pg_class i ON i.oid = x.indexrelid
        LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
        WHERE c.relname=tablename and i.relname not in
        ( select constraint_name from information_schema.key_column_usage where table_name=tablename )
        )as t
        ) ,','|| chr(13)||chr(10));


        -- COMMENT COMMENT ON COLUMN sys_activity.id IS '主键';
        tableScript:= tableScript || chr(13)||chr(10) || chr(13)||chr(10) || array_to_string(
        array(
        SELECT 'COMMENT ON COLUMN' || tablename || '.' || a.attname ||' IS '|| ''''|| d.description ||''''
        FROM pg_class c
        JOIN pg_description d ON c.oid=d.objoid
        JOIN pg_attribute a ON c.oid = a.attrelid
        WHERE c.relname=tablename
        AND a.attnum = d.objsubid),','|| chr(13)||chr(10)) ;

        return tableScript;

        end
        $BODY$ LANGUAGE plpgsql;

        CREATE OR REPLACE FUNCTION findattname(namespace character varying, tablename character varying, ctype character
        varying)
        RETURNS character varying as $BODY$

        declare
        tt oid ;
        aname character varying default '';

        begin
        tt := oid from pg_class where relname= tablename and relnamespace =(select oid from pg_namespace where
        nspname=namespace) ;
        aname:= array_to_string(
        array(
        select a.attname from pg_attribute a
        where a.attrelid=tt and a.attnum in (
        select unnest(conkey) from pg_constraint c where contype=ctype
        and conrelid=tt and array_to_string(conkey,',') is not null
        )
        ),',');

        return aname;
        end
        $BODY$ LANGUAGE plpgsql;


        select showcreatetable(#{tableSchema,jdbcType=VARCHAR},#{tableName,jdbcType=VARCHAR});
    </select>
    <select id="selectTableIndexes" resultMap="TableIndexResultMap">
        select schemaname,tablename,indexname,indexdef
        from pg_indexes where schemaname=#{tableSchema,jdbcType=VARCHAR} and tablename = #{tableName};
    </select>
</mapper>