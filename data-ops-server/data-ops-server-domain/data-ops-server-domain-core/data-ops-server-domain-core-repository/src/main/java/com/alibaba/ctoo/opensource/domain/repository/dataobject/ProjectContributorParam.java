package com.alibaba.ctoo.opensource.domain.repository.dataobject;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * This class was generated by Ali-Generator
 * @author liugong
 */
public class ProjectContributorParam {
    /**
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     *
     * @mbg.generated
     */
    @Deprecated
    protected boolean distinct;

    /**
     *
     * @mbg.generated
     */
    protected boolean page;

    /**
     *
     * @mbg.generated
     */
    protected int pageIndex;

    /**
     *
     * @mbg.generated
     */
    protected int pageSize;

    /**
     *
     * @mbg.generated
     */
    protected int pageStart;

    /**
     *
     * @mbg.generated
     */
    protected String distinctSql;

    /**
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     *
     * @mbg.generated
     */
    public ProjectContributorParam() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * @param orderCondition
     * @param sortType
     * @return
     *
     * @mbg.generated
     */
    public ProjectContributorParam appendOrderByClause(OrderCondition orderCondition, SortType sortType) {
        if (null != orderByClause) {
            orderByClause = orderByClause + ", " + orderCondition.getColumnName() + " " + sortType.getValue();
        } else {
            orderByClause = orderCondition.getColumnName() + " " + sortType.getValue();
        }
        return this;
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * @param distinct
     *
     * @mbg.generated
     */
    @Deprecated
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    @Deprecated
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * @param page
     * @return
     *
     * @mbg.generated
     */
    public ProjectContributorParam setPage(boolean page) {
        this.page = page;
        return this;
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    public boolean isPage() {
        return page;
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    public int getPageIndex() {
        return pageIndex;
    }

    /**
     * @param pageSize
     * @return
     *
     * @mbg.generated
     */
    public ProjectContributorParam setPageSize(int pageSize) {
        this.pageSize = pageSize < 1 ? 10 : pageSize;
        this.pageIndex = pageStart < 1 ? 0 : (pageStart - 1) * this.pageSize;
        return this;
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * @param pageStart
     * @return
     *
     * @mbg.generated
     */
    public ProjectContributorParam setPageStart(int pageStart) {
        this.pageStart = pageStart < 1 ? 1 : pageStart;
        this.pageIndex = (this.pageStart - 1) * this.pageSize;
        return this;
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    public int getPageStart() {
        return pageStart;
    }

    /**
     * @param pageStart
     * @param pageSize
     *
     * @mbg.generated
     */
    public void setPagination(int pageStart, int pageSize) {
        this.page = true;
        this.pageSize = pageSize < 1 ? 10 : pageSize;
        this.pageIndex = pageStart < 1 ? 0 : (pageStart - 1) * this.pageSize;
    }

    /**
     * @param condition
     * @return
     *
     * @mbg.generated
     */
    public ProjectContributorParam appendDistinct(OrderCondition condition) {
        if (null != distinctSql){
            distinctSql = distinctSql + ", " + condition.getColumnName();
        } else {
            distinctSql = condition.getColumnName();
        }
        return this;
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * @param criteria
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * @return
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     *
     * @mbg.generated
     */
    protected abstract static class AbstractGeneratedCriteria {
        protected List<Criterion> criteria;

        protected AbstractGeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andGmtCreateIsNull() {
            addCriterion("gmt_create is null");
            return (Criteria) this;
        }

        public Criteria andGmtCreateIsNotNull() {
            addCriterion("gmt_create is not null");
            return (Criteria) this;
        }

        public Criteria andGmtCreateEqualTo(Date value) {
            addCriterion("gmt_create =", value, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtCreateNotEqualTo(Date value) {
            addCriterion("gmt_create <>", value, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtCreateGreaterThan(Date value) {
            addCriterion("gmt_create >", value, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtCreateGreaterThanOrEqualTo(Date value) {
            addCriterion("gmt_create >=", value, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtCreateLessThan(Date value) {
            addCriterion("gmt_create <", value, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtCreateLessThanOrEqualTo(Date value) {
            addCriterion("gmt_create <=", value, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtCreateIn(List<Date> values) {
            addCriterion("gmt_create in", values, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtCreateNotIn(List<Date> values) {
            addCriterion("gmt_create not in", values, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtCreateBetween(Date value1, Date value2) {
            addCriterion("gmt_create between", value1, value2, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtCreateNotBetween(Date value1, Date value2) {
            addCriterion("gmt_create not between", value1, value2, "gmtCreate");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedIsNull() {
            addCriterion("gmt_modified is null");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedIsNotNull() {
            addCriterion("gmt_modified is not null");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedEqualTo(Date value) {
            addCriterion("gmt_modified =", value, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedNotEqualTo(Date value) {
            addCriterion("gmt_modified <>", value, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedGreaterThan(Date value) {
            addCriterion("gmt_modified >", value, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedGreaterThanOrEqualTo(Date value) {
            addCriterion("gmt_modified >=", value, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedLessThan(Date value) {
            addCriterion("gmt_modified <", value, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedLessThanOrEqualTo(Date value) {
            addCriterion("gmt_modified <=", value, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedIn(List<Date> values) {
            addCriterion("gmt_modified in", values, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedNotIn(List<Date> values) {
            addCriterion("gmt_modified not in", values, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedBetween(Date value1, Date value2) {
            addCriterion("gmt_modified between", value1, value2, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andGmtModifiedNotBetween(Date value1, Date value2) {
            addCriterion("gmt_modified not between", value1, value2, "gmtModified");
            return (Criteria) this;
        }

        public Criteria andCreatorIsNull() {
            addCriterion("creator is null");
            return (Criteria) this;
        }

        public Criteria andCreatorIsNotNull() {
            addCriterion("creator is not null");
            return (Criteria) this;
        }

        public Criteria andCreatorEqualTo(String value) {
            addCriterion("creator =", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorNotEqualTo(String value) {
            addCriterion("creator <>", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorGreaterThan(String value) {
            addCriterion("creator >", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorGreaterThanOrEqualTo(String value) {
            addCriterion("creator >=", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorLessThan(String value) {
            addCriterion("creator <", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorLessThanOrEqualTo(String value) {
            addCriterion("creator <=", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorLike(String value) {
            addCriterion("creator like", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorNotLike(String value) {
            addCriterion("creator not like", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorIn(List<String> values) {
            addCriterion("creator in", values, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorNotIn(List<String> values) {
            addCriterion("creator not in", values, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorBetween(String value1, String value2) {
            addCriterion("creator between", value1, value2, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorNotBetween(String value1, String value2) {
            addCriterion("creator not between", value1, value2, "creator");
            return (Criteria) this;
        }

        public Criteria andModifierIsNull() {
            addCriterion("modifier is null");
            return (Criteria) this;
        }

        public Criteria andModifierIsNotNull() {
            addCriterion("modifier is not null");
            return (Criteria) this;
        }

        public Criteria andModifierEqualTo(String value) {
            addCriterion("modifier =", value, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierNotEqualTo(String value) {
            addCriterion("modifier <>", value, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierGreaterThan(String value) {
            addCriterion("modifier >", value, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierGreaterThanOrEqualTo(String value) {
            addCriterion("modifier >=", value, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierLessThan(String value) {
            addCriterion("modifier <", value, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierLessThanOrEqualTo(String value) {
            addCriterion("modifier <=", value, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierLike(String value) {
            addCriterion("modifier like", value, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierNotLike(String value) {
            addCriterion("modifier not like", value, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierIn(List<String> values) {
            addCriterion("modifier in", values, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierNotIn(List<String> values) {
            addCriterion("modifier not in", values, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierBetween(String value1, String value2) {
            addCriterion("modifier between", value1, value2, "modifier");
            return (Criteria) this;
        }

        public Criteria andModifierNotBetween(String value1, String value2) {
            addCriterion("modifier not between", value1, value2, "modifier");
            return (Criteria) this;
        }

        public Criteria andDeletedIdIsNull() {
            addCriterion("deleted_id is null");
            return (Criteria) this;
        }

        public Criteria andDeletedIdIsNotNull() {
            addCriterion("deleted_id is not null");
            return (Criteria) this;
        }

        public Criteria andDeletedIdEqualTo(Long value) {
            addCriterion("deleted_id =", value, "deletedId");
            return (Criteria) this;
        }

        public Criteria andDeletedIdNotEqualTo(Long value) {
            addCriterion("deleted_id <>", value, "deletedId");
            return (Criteria) this;
        }

        public Criteria andDeletedIdGreaterThan(Long value) {
            addCriterion("deleted_id >", value, "deletedId");
            return (Criteria) this;
        }

        public Criteria andDeletedIdGreaterThanOrEqualTo(Long value) {
            addCriterion("deleted_id >=", value, "deletedId");
            return (Criteria) this;
        }

        public Criteria andDeletedIdLessThan(Long value) {
            addCriterion("deleted_id <", value, "deletedId");
            return (Criteria) this;
        }

        public Criteria andDeletedIdLessThanOrEqualTo(Long value) {
            addCriterion("deleted_id <=", value, "deletedId");
            return (Criteria) this;
        }

        public Criteria andDeletedIdIn(List<Long> values) {
            addCriterion("deleted_id in", values, "deletedId");
            return (Criteria) this;
        }

        public Criteria andDeletedIdNotIn(List<Long> values) {
            addCriterion("deleted_id not in", values, "deletedId");
            return (Criteria) this;
        }

        public Criteria andDeletedIdBetween(Long value1, Long value2) {
            addCriterion("deleted_id between", value1, value2, "deletedId");
            return (Criteria) this;
        }

        public Criteria andDeletedIdNotBetween(Long value1, Long value2) {
            addCriterion("deleted_id not between", value1, value2, "deletedId");
            return (Criteria) this;
        }

        public Criteria andTenantIdIsNull() {
            addCriterion("tenant_id is null");
            return (Criteria) this;
        }

        public Criteria andTenantIdIsNotNull() {
            addCriterion("tenant_id is not null");
            return (Criteria) this;
        }

        public Criteria andTenantIdEqualTo(String value) {
            addCriterion("tenant_id =", value, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdNotEqualTo(String value) {
            addCriterion("tenant_id <>", value, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdGreaterThan(String value) {
            addCriterion("tenant_id >", value, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdGreaterThanOrEqualTo(String value) {
            addCriterion("tenant_id >=", value, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdLessThan(String value) {
            addCriterion("tenant_id <", value, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdLessThanOrEqualTo(String value) {
            addCriterion("tenant_id <=", value, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdLike(String value) {
            addCriterion("tenant_id like", value, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdNotLike(String value) {
            addCriterion("tenant_id not like", value, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdIn(List<String> values) {
            addCriterion("tenant_id in", values, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdNotIn(List<String> values) {
            addCriterion("tenant_id not in", values, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdBetween(String value1, String value2) {
            addCriterion("tenant_id between", value1, value2, "tenantId");
            return (Criteria) this;
        }

        public Criteria andTenantIdNotBetween(String value1, String value2) {
            addCriterion("tenant_id not between", value1, value2, "tenantId");
            return (Criteria) this;
        }

        public Criteria andProjectIdIsNull() {
            addCriterion("project_id is null");
            return (Criteria) this;
        }

        public Criteria andProjectIdIsNotNull() {
            addCriterion("project_id is not null");
            return (Criteria) this;
        }

        public Criteria andProjectIdEqualTo(Long value) {
            addCriterion("project_id =", value, "projectId");
            return (Criteria) this;
        }

        public Criteria andProjectIdNotEqualTo(Long value) {
            addCriterion("project_id <>", value, "projectId");
            return (Criteria) this;
        }

        public Criteria andProjectIdGreaterThan(Long value) {
            addCriterion("project_id >", value, "projectId");
            return (Criteria) this;
        }

        public Criteria andProjectIdGreaterThanOrEqualTo(Long value) {
            addCriterion("project_id >=", value, "projectId");
            return (Criteria) this;
        }

        public Criteria andProjectIdLessThan(Long value) {
            addCriterion("project_id <", value, "projectId");
            return (Criteria) this;
        }

        public Criteria andProjectIdLessThanOrEqualTo(Long value) {
            addCriterion("project_id <=", value, "projectId");
            return (Criteria) this;
        }

        public Criteria andProjectIdIn(List<Long> values) {
            addCriterion("project_id in", values, "projectId");
            return (Criteria) this;
        }

        public Criteria andProjectIdNotIn(List<Long> values) {
            addCriterion("project_id not in", values, "projectId");
            return (Criteria) this;
        }

        public Criteria andProjectIdBetween(Long value1, Long value2) {
            addCriterion("project_id between", value1, value2, "projectId");
            return (Criteria) this;
        }

        public Criteria andProjectIdNotBetween(Long value1, Long value2) {
            addCriterion("project_id not between", value1, value2, "projectId");
            return (Criteria) this;
        }

        public Criteria andEmailIsNull() {
            addCriterion("email is null");
            return (Criteria) this;
        }

        public Criteria andEmailIsNotNull() {
            addCriterion("email is not null");
            return (Criteria) this;
        }

        public Criteria andEmailEqualTo(String value) {
            addCriterion("email =", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailNotEqualTo(String value) {
            addCriterion("email <>", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailGreaterThan(String value) {
            addCriterion("email >", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailGreaterThanOrEqualTo(String value) {
            addCriterion("email >=", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailLessThan(String value) {
            addCriterion("email <", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailLessThanOrEqualTo(String value) {
            addCriterion("email <=", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailLike(String value) {
            addCriterion("email like", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailNotLike(String value) {
            addCriterion("email not like", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailIn(List<String> values) {
            addCriterion("email in", values, "email");
            return (Criteria) this;
        }

        public Criteria andEmailNotIn(List<String> values) {
            addCriterion("email not in", values, "email");
            return (Criteria) this;
        }

        public Criteria andEmailBetween(String value1, String value2) {
            addCriterion("email between", value1, value2, "email");
            return (Criteria) this;
        }

        public Criteria andEmailNotBetween(String value1, String value2) {
            addCriterion("email not between", value1, value2, "email");
            return (Criteria) this;
        }

        public Criteria andNameIsNull() {
            addCriterion("name is null");
            return (Criteria) this;
        }

        public Criteria andNameIsNotNull() {
            addCriterion("name is not null");
            return (Criteria) this;
        }

        public Criteria andNameEqualTo(String value) {
            addCriterion("name =", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotEqualTo(String value) {
            addCriterion("name <>", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThan(String value) {
            addCriterion("name >", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanOrEqualTo(String value) {
            addCriterion("name >=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThan(String value) {
            addCriterion("name <", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThanOrEqualTo(String value) {
            addCriterion("name <=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLike(String value) {
            addCriterion("name like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotLike(String value) {
            addCriterion("name not like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameIn(List<String> values) {
            addCriterion("name in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotIn(List<String> values) {
            addCriterion("name not in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameBetween(String value1, String value2) {
            addCriterion("name between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotBetween(String value1, String value2) {
            addCriterion("name not between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andUserTypeIsNull() {
            addCriterion("user_type is null");
            return (Criteria) this;
        }

        public Criteria andUserTypeIsNotNull() {
            addCriterion("user_type is not null");
            return (Criteria) this;
        }

        public Criteria andUserTypeEqualTo(String value) {
            addCriterion("user_type =", value, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeNotEqualTo(String value) {
            addCriterion("user_type <>", value, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeGreaterThan(String value) {
            addCriterion("user_type >", value, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeGreaterThanOrEqualTo(String value) {
            addCriterion("user_type >=", value, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeLessThan(String value) {
            addCriterion("user_type <", value, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeLessThanOrEqualTo(String value) {
            addCriterion("user_type <=", value, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeLike(String value) {
            addCriterion("user_type like", value, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeNotLike(String value) {
            addCriterion("user_type not like", value, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeIn(List<String> values) {
            addCriterion("user_type in", values, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeNotIn(List<String> values) {
            addCriterion("user_type not in", values, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeBetween(String value1, String value2) {
            addCriterion("user_type between", value1, value2, "userType");
            return (Criteria) this;
        }

        public Criteria andUserTypeNotBetween(String value1, String value2) {
            addCriterion("user_type not between", value1, value2, "userType");
            return (Criteria) this;
        }

        public Criteria andContributionsIsNull() {
            addCriterion("contributions is null");
            return (Criteria) this;
        }

        public Criteria andContributionsIsNotNull() {
            addCriterion("contributions is not null");
            return (Criteria) this;
        }

        public Criteria andContributionsEqualTo(Integer value) {
            addCriterion("contributions =", value, "contributions");
            return (Criteria) this;
        }

        public Criteria andContributionsNotEqualTo(Integer value) {
            addCriterion("contributions <>", value, "contributions");
            return (Criteria) this;
        }

        public Criteria andContributionsGreaterThan(Integer value) {
            addCriterion("contributions >", value, "contributions");
            return (Criteria) this;
        }

        public Criteria andContributionsGreaterThanOrEqualTo(Integer value) {
            addCriterion("contributions >=", value, "contributions");
            return (Criteria) this;
        }

        public Criteria andContributionsLessThan(Integer value) {
            addCriterion("contributions <", value, "contributions");
            return (Criteria) this;
        }

        public Criteria andContributionsLessThanOrEqualTo(Integer value) {
            addCriterion("contributions <=", value, "contributions");
            return (Criteria) this;
        }

        public Criteria andContributionsIn(List<Integer> values) {
            addCriterion("contributions in", values, "contributions");
            return (Criteria) this;
        }

        public Criteria andContributionsNotIn(List<Integer> values) {
            addCriterion("contributions not in", values, "contributions");
            return (Criteria) this;
        }

        public Criteria andContributionsBetween(Integer value1, Integer value2) {
            addCriterion("contributions between", value1, value2, "contributions");
            return (Criteria) this;
        }

        public Criteria andContributionsNotBetween(Integer value1, Integer value2) {
            addCriterion("contributions not between", value1, value2, "contributions");
            return (Criteria) this;
        }

        public Criteria andGitTypeIsNull() {
            addCriterion("git_type is null");
            return (Criteria) this;
        }

        public Criteria andGitTypeIsNotNull() {
            addCriterion("git_type is not null");
            return (Criteria) this;
        }

        public Criteria andGitTypeEqualTo(String value) {
            addCriterion("git_type =", value, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeNotEqualTo(String value) {
            addCriterion("git_type <>", value, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeGreaterThan(String value) {
            addCriterion("git_type >", value, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeGreaterThanOrEqualTo(String value) {
            addCriterion("git_type >=", value, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeLessThan(String value) {
            addCriterion("git_type <", value, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeLessThanOrEqualTo(String value) {
            addCriterion("git_type <=", value, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeLike(String value) {
            addCriterion("git_type like", value, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeNotLike(String value) {
            addCriterion("git_type not like", value, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeIn(List<String> values) {
            addCriterion("git_type in", values, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeNotIn(List<String> values) {
            addCriterion("git_type not in", values, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeBetween(String value1, String value2) {
            addCriterion("git_type between", value1, value2, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitTypeNotBetween(String value1, String value2) {
            addCriterion("git_type not between", value1, value2, "gitType");
            return (Criteria) this;
        }

        public Criteria andGitUserIdIsNull() {
            addCriterion("git_user_id is null");
            return (Criteria) this;
        }

        public Criteria andGitUserIdIsNotNull() {
            addCriterion("git_user_id is not null");
            return (Criteria) this;
        }

        public Criteria andGitUserIdEqualTo(Long value) {
            addCriterion("git_user_id =", value, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andGitUserIdNotEqualTo(Long value) {
            addCriterion("git_user_id <>", value, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andGitUserIdGreaterThan(Long value) {
            addCriterion("git_user_id >", value, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andGitUserIdGreaterThanOrEqualTo(Long value) {
            addCriterion("git_user_id >=", value, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andGitUserIdLessThan(Long value) {
            addCriterion("git_user_id <", value, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andGitUserIdLessThanOrEqualTo(Long value) {
            addCriterion("git_user_id <=", value, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andGitUserIdIn(List<Long> values) {
            addCriterion("git_user_id in", values, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andGitUserIdNotIn(List<Long> values) {
            addCriterion("git_user_id not in", values, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andGitUserIdBetween(Long value1, Long value2) {
            addCriterion("git_user_id between", value1, value2, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andGitUserIdNotBetween(Long value1, Long value2) {
            addCriterion("git_user_id not between", value1, value2, "gitUserId");
            return (Criteria) this;
        }

        public Criteria andIdEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("id =", value, "id");
            }
            return (Criteria) this;
        }

        public Criteria andIdNotEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("id <>", value, "id");
            }
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanWhenPresent(Long value) {
            if(value != null) {
                addCriterion("id >", value, "id");
            }
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("id >=", value, "id");
            }
            return (Criteria) this;
        }

        public Criteria andIdLessThanWhenPresent(Long value) {
            if(value != null) {
                addCriterion("id <", value, "id");
            }
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("id <=", value, "id");
            }
            return (Criteria) this;
        }

        public Criteria andIdInWhenPresent(List<Long> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("id in", values, "id");
            }
            return (Criteria) this;
        }

        public Criteria andIdNotInWhenPresent(List<Long> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("id not in", values, "id");
            }
            return (Criteria) this;
        }

        public Criteria andIdBetweenWhenPresent(Long value1, Long value2) {
            if(value1 != null && value2 != null){
                addCriterion("id between", value1, value2, "id");
            }
            return (Criteria) this;
        }

        public Criteria andIdNotBetweenWhenPresent(Long value1, Long value2) {
            if(value1 != null && value2 != null){
                addCriterion("id not between", value1, value2, "id");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateEqualToWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_create =", value, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateNotEqualToWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_create <>", value, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateGreaterThanWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_create >", value, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateGreaterThanOrEqualToWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_create >=", value, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateLessThanWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_create <", value, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateLessThanOrEqualToWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_create <=", value, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateInWhenPresent(List<Date> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("gmt_create in", values, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateNotInWhenPresent(List<Date> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("gmt_create not in", values, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateBetweenWhenPresent(Date value1, Date value2) {
            if(value1 != null && value2 != null){
                addCriterion("gmt_create between", value1, value2, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtCreateNotBetweenWhenPresent(Date value1, Date value2) {
            if(value1 != null && value2 != null){
                addCriterion("gmt_create not between", value1, value2, "gmtCreate");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedEqualToWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_modified =", value, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedNotEqualToWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_modified <>", value, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedGreaterThanWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_modified >", value, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedGreaterThanOrEqualToWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_modified >=", value, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedLessThanWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_modified <", value, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedLessThanOrEqualToWhenPresent(Date value) {
            if(value != null) {
                addCriterion("gmt_modified <=", value, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedInWhenPresent(List<Date> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("gmt_modified in", values, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedNotInWhenPresent(List<Date> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("gmt_modified not in", values, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedBetweenWhenPresent(Date value1, Date value2) {
            if(value1 != null && value2 != null){
                addCriterion("gmt_modified between", value1, value2, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andGmtModifiedNotBetweenWhenPresent(Date value1, Date value2) {
            if(value1 != null && value2 != null){
                addCriterion("gmt_modified not between", value1, value2, "gmtModified");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("creator =", value, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorNotEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("creator <>", value, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorGreaterThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("creator >", value, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorGreaterThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("creator >=", value, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorLessThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("creator <", value, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorLessThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("creator <=", value, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("creator like", value, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorNotLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("creator not like", value, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("creator in", values, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorNotInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("creator not in", values, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("creator between", value1, value2, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andCreatorNotBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("creator not between", value1, value2, "creator");
            }
            return (Criteria) this;
        }

        public Criteria andModifierEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("modifier =", value, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierNotEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("modifier <>", value, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierGreaterThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("modifier >", value, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierGreaterThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("modifier >=", value, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierLessThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("modifier <", value, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierLessThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("modifier <=", value, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("modifier like", value, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierNotLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("modifier not like", value, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("modifier in", values, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierNotInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("modifier not in", values, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("modifier between", value1, value2, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andModifierNotBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("modifier not between", value1, value2, "modifier");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("deleted_id =", value, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdNotEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("deleted_id <>", value, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdGreaterThanWhenPresent(Long value) {
            if(value != null) {
                addCriterion("deleted_id >", value, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdGreaterThanOrEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("deleted_id >=", value, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdLessThanWhenPresent(Long value) {
            if(value != null) {
                addCriterion("deleted_id <", value, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdLessThanOrEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("deleted_id <=", value, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdInWhenPresent(List<Long> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("deleted_id in", values, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdNotInWhenPresent(List<Long> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("deleted_id not in", values, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdBetweenWhenPresent(Long value1, Long value2) {
            if(value1 != null && value2 != null){
                addCriterion("deleted_id between", value1, value2, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andDeletedIdNotBetweenWhenPresent(Long value1, Long value2) {
            if(value1 != null && value2 != null){
                addCriterion("deleted_id not between", value1, value2, "deletedId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("tenant_id =", value, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdNotEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("tenant_id <>", value, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdGreaterThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("tenant_id >", value, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdGreaterThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("tenant_id >=", value, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdLessThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("tenant_id <", value, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdLessThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("tenant_id <=", value, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("tenant_id like", value, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdNotLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("tenant_id not like", value, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("tenant_id in", values, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdNotInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("tenant_id not in", values, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("tenant_id between", value1, value2, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andTenantIdNotBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("tenant_id not between", value1, value2, "tenantId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("project_id =", value, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdNotEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("project_id <>", value, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdGreaterThanWhenPresent(Long value) {
            if(value != null) {
                addCriterion("project_id >", value, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdGreaterThanOrEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("project_id >=", value, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdLessThanWhenPresent(Long value) {
            if(value != null) {
                addCriterion("project_id <", value, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdLessThanOrEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("project_id <=", value, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdInWhenPresent(List<Long> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("project_id in", values, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdNotInWhenPresent(List<Long> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("project_id not in", values, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdBetweenWhenPresent(Long value1, Long value2) {
            if(value1 != null && value2 != null){
                addCriterion("project_id between", value1, value2, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andProjectIdNotBetweenWhenPresent(Long value1, Long value2) {
            if(value1 != null && value2 != null){
                addCriterion("project_id not between", value1, value2, "projectId");
            }
            return (Criteria) this;
        }

        public Criteria andEmailEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("email =", value, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailNotEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("email <>", value, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailGreaterThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("email >", value, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailGreaterThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("email >=", value, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailLessThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("email <", value, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailLessThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("email <=", value, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("email like", value, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailNotLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("email not like", value, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("email in", values, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailNotInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("email not in", values, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("email between", value1, value2, "email");
            }
            return (Criteria) this;
        }

        public Criteria andEmailNotBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("email not between", value1, value2, "email");
            }
            return (Criteria) this;
        }

        public Criteria andNameEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("name =", value, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameNotEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("name <>", value, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("name >", value, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("name >=", value, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameLessThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("name <", value, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameLessThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("name <=", value, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("name like", value, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameNotLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("name not like", value, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("name in", values, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameNotInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("name not in", values, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("name between", value1, value2, "name");
            }
            return (Criteria) this;
        }

        public Criteria andNameNotBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("name not between", value1, value2, "name");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("user_type =", value, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeNotEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("user_type <>", value, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeGreaterThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("user_type >", value, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeGreaterThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("user_type >=", value, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeLessThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("user_type <", value, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeLessThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("user_type <=", value, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("user_type like", value, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeNotLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("user_type not like", value, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("user_type in", values, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeNotInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("user_type not in", values, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("user_type between", value1, value2, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andUserTypeNotBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("user_type not between", value1, value2, "userType");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsEqualToWhenPresent(Integer value) {
            if(value != null) {
                addCriterion("contributions =", value, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsNotEqualToWhenPresent(Integer value) {
            if(value != null) {
                addCriterion("contributions <>", value, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsGreaterThanWhenPresent(Integer value) {
            if(value != null) {
                addCriterion("contributions >", value, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsGreaterThanOrEqualToWhenPresent(Integer value) {
            if(value != null) {
                addCriterion("contributions >=", value, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsLessThanWhenPresent(Integer value) {
            if(value != null) {
                addCriterion("contributions <", value, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsLessThanOrEqualToWhenPresent(Integer value) {
            if(value != null) {
                addCriterion("contributions <=", value, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsInWhenPresent(List<Integer> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("contributions in", values, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsNotInWhenPresent(List<Integer> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("contributions not in", values, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsBetweenWhenPresent(Integer value1, Integer value2) {
            if(value1 != null && value2 != null){
                addCriterion("contributions between", value1, value2, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andContributionsNotBetweenWhenPresent(Integer value1, Integer value2) {
            if(value1 != null && value2 != null){
                addCriterion("contributions not between", value1, value2, "contributions");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("git_type =", value, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeNotEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("git_type <>", value, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeGreaterThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("git_type >", value, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeGreaterThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("git_type >=", value, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeLessThanWhenPresent(String value) {
            if(value != null) {
                addCriterion("git_type <", value, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeLessThanOrEqualToWhenPresent(String value) {
            if(value != null) {
                addCriterion("git_type <=", value, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("git_type like", value, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeNotLikeWhenPresent(String value) {
            if(value != null) {
                addCriterion("git_type not like", value, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("git_type in", values, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeNotInWhenPresent(List<String> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("git_type not in", values, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("git_type between", value1, value2, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitTypeNotBetweenWhenPresent(String value1, String value2) {
            if(value1 != null && value2 != null){
                addCriterion("git_type not between", value1, value2, "gitType");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("git_user_id =", value, "gitUserId");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdNotEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("git_user_id <>", value, "gitUserId");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdGreaterThanWhenPresent(Long value) {
            if(value != null) {
                addCriterion("git_user_id >", value, "gitUserId");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdGreaterThanOrEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("git_user_id >=", value, "gitUserId");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdLessThanWhenPresent(Long value) {
            if(value != null) {
                addCriterion("git_user_id <", value, "gitUserId");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdLessThanOrEqualToWhenPresent(Long value) {
            if(value != null) {
                addCriterion("git_user_id <=", value, "gitUserId");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdInWhenPresent(List<Long> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("git_user_id in", values, "gitUserId");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdNotInWhenPresent(List<Long> values) {
            if(values != null && !values.isEmpty()){
                addCriterion("git_user_id not in", values, "gitUserId");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdBetweenWhenPresent(Long value1, Long value2) {
            if(value1 != null && value2 != null){
                addCriterion("git_user_id between", value1, value2, "gitUserId");
            }
            return (Criteria) this;
        }

        public Criteria andGitUserIdNotBetweenWhenPresent(Long value1, Long value2) {
            if(value1 != null && value2 != null){
                addCriterion("git_user_id not between", value1, value2, "gitUserId");
            }
            return (Criteria) this;
        }
    }

    /**
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends AbstractGeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    /**
     *
     * @mbg.generated
     */
    public enum OrderCondition {
        /**
         *主键
         */
        ID("id"),
        /**
         *创建时间
         */
        GMTCREATE("gmt_create"),
        /**
         *修改时间
         */
        GMTMODIFIED("gmt_modified"),
        /**
         *创建人
         */
        CREATOR("creator"),
        /**
         *修改人
         */
        MODIFIER("modifier"),
        /**
         *逻辑删除标志 删除的时候 将当前字段设置成id，0 - 有效  其他有效
         */
        DELETEDID("deleted_id"),
        /**
         *租户id
         */
        TENANTID("tenant_id"),
        /**
         *项目ID
         */
        PROJECTID("project_id"),
        /**
         *用户邮箱
         */
        EMAIL("email"),
        /**
         *用户昵称/登录名
         */
        NAME("name"),
        /**
         *用户类型
         */
        USERTYPE("user_type"),
        /**
         *贡献值
         */
        CONTRIBUTIONS("contributions"),
        /**
         *git类型
         */
        GITTYPE("git_type"),
        /**
         *git 用户ID
         */
        GITUSERID("git_user_id");

        private String columnName;

        OrderCondition(String columnName) {
            this.columnName = columnName;
        }

        public String getColumnName() {
            return columnName;
        }

        public static OrderCondition getEnumByName(String name) {
            OrderCondition[] orderConditions = OrderCondition.values();
            for (OrderCondition orderCondition : orderConditions) {
                if (orderCondition.name().equalsIgnoreCase(name)) {
                    return orderCondition;
                }
            }
            throw new RuntimeException("OrderCondition of " + name + " enum not exist");
        }

        @Override
        public String toString() {
            return columnName;
        }
    }

    /**
     *
     * @mbg.generated
     */
    public enum SortType {
        /**
         * 升序
         */
        ASC("asc"),
        /**
         * 降序
         */
        DESC("desc");

        private String value;

        SortType(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        public static SortType getEnumByName(String name) {
            SortType[] sortTypes = SortType.values();
            for (SortType sortType : sortTypes) {
                if (sortType.name().equalsIgnoreCase(name)) {
                    return sortType;
                }
            }
            throw new RuntimeException("SortType of " + name + " enum not exist");
        }

        @Override
        public String toString() {
            return value;
        }
    }
}